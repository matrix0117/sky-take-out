<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.sky.mapper.OrderMapper">

    <insert id="insertOrder" useGeneratedKeys="true" keyProperty="id" parameterType="com.sky.entity.Orders">
        insert into orders (number, status, user_id, address_book_id, order_time, checkout_time, pay_method, pay_status,
                            amount, remark, phone, address, user_name, consignee, cancel_reason, rejection_reason,
                            cancel_time, estimated_delivery_time, delivery_status, delivery_time, pack_amount,
                            tableware_number, tableware_status)
        values ( #{number}, #{status}, #{userId}, #{addressBookId}, #{orderTime}, #{checkoutTime}, #{payMethod}
               , #{payStatus}, #{amount}
               , #{remark}, #{phone}, #{address}, #{userName}, #{consignee}, #{cancelReason}, #{rejectionReason}
               , #{cancelTime}, #{estimatedDeliveryTime}
               , #{deliveryStatus}, #{deliveryTime}, #{packAmount}
               , #{tablewareNumber}, #{tablewareStatus});
    </insert>
    <update id="update">
        update orders
        <set>
            <if test="cancelReason != null and cancelReason!='' ">
                cancel_reason=#{cancelReason},
            </if>
            <if test="rejectionReason != null and rejectionReason!='' ">
                rejection_reason=#{rejectionReason},
            </if>
            <if test="cancelTime != null">
                cancel_time=#{cancelTime},
            </if>
            <if test="payStatus != null">
                pay_status=#{payStatus},
            </if>
            <if test="payMethod != null">
                pay_method=#{payMethod},
            </if>
            <if test="checkoutTime != null">
                checkout_time=#{checkoutTime},
            </if>
            <if test="status != null">
                status = #{status},
            </if>
            <if test="deliveryTime != null">
                delivery_time = #{deliveryTime}
            </if>
        </set>
        where id = #{id}
    </update>
    <update id="cancelOrder">
        update orders
        set status = 6,
        <if test="cancelReason != null">cancel_reason = #{cancelReason}</if>
        where id = #{id}
    </update>
    <select id="getHistoryOrders" resultType="com.sky.vo.OrderVO">
        select *
        from orders
        <where>
            <if test="number != null">number like concat("%",#{number},"%")</if>
            <if test="phone != null">and phone like concat("%",#{phone},"%")</if>
            <if test="status != null">and status = #{status}</if>
            <if test="beginTime != null and endTime != null">and order_time between #{beginTime} and #{endTime}</if>
            and user_id = #{userId}
        </where>
        order by order_time desc
    </select>
    <select id="statistics" resultType="com.sky.vo.OrderStatisticsVO">
        select count(status = 2 or null) as toBeConfirmed,
               count(status = 3 or null) as confirmed,
               count(status = 4 or null) as deliveryInProgress
        from orders
    </select>
    <select id="getOrders" resultType="com.sky.vo.OrderVO">
        select *
        from orders
        <where>
            <if test="number != null">number like concat("%",#{number},"%")</if>
            <if test="phone != null">and phone like concat("%",#{phone},"%")</if>
            <if test="status != null">and status = #{status}</if>
            <if test="beginTime != null and endTime != null">and order_time between #{beginTime} and #{endTime}</if>
        </where>
        order by order_time desc
    </select>
    <select id="countByMap" resultType="java.lang.Integer">
        select count(id) from orders
        <where>
            <if test="status != null">
                and status = #{status}
            </if>
            and order_time between #{begin} and #{end}
        </where>
    </select>
    <select id="sumByMap" resultType="java.lang.Double">
        select sum(amount) from orders
        <where>
            <if test="status != null">
                and status = #{status}
            </if>
            and order_time between #{begin} and #{end}
        </where>
    </select>
</mapper>